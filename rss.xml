<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/">
  <channel>
    <title>Atsushi Nagase</title>
    <atom:link href="https://ngs.io/rss.xml" rel="self" type="application/rss+xml"/>
    <atom:link href="https://ngs.io/feed.xml" type="application/atom+xml"/>
    <language>en</language>
    <description>Hacking recipes in my life.</description>
    <link>https://ngs.io/</link>
    <lastBuildDate>Fri, 08 Feb 2019 12:00:00 +0000</lastBuildDate>
    <item>
      <title>Go Release Binary GitHub Action</title>
      <link>https://ngs.io/2019/02/08/go-release-action/</link>
      <guid>https://ngs.io/2019/02/08/go-release-action/</guid>
      <pubDate>Fri, 08 Feb 2019 12:00:00 +0000</pubDate>
      <author>a@ngs.io (Atsushi Nagase)</author>
      <description>&lt;p&gt;I’ve published Go Release Binary Action on GitHub Marketplace.&lt;/p&gt;

&lt;p&gt;Go Release Binary Action on GitHub Marketplace&lt;/p&gt;

&lt;p&gt;This GitHub Action builds and uploads Go build artifacts as Release Artifacts automatically when Release was created on GitHub repository.&lt;/p&gt;&lt;h2&gt;GitHub Actions&lt;/h2&gt;

&lt;p&gt;GitHub Actions is provided as Limited Public Beta now (8th, Feb, 2019). You can start using this feature by signing up from the below page.&lt;/p&gt;

&lt;p&gt;https://github.com/features/actions&lt;/p&gt;

&lt;h2&gt;How to Use&lt;/h2&gt;&lt;p&gt;ngs/aws1pif@v1.0.0&lt;/p&gt;

&lt;p&gt;Place .workflow file like the below. The workflow builds and uploads build artifacts from referencing commit when new Release was created using GitHub Releases feature.&lt;/p&gt;
  # .github/main.workflow

workflow "Build" {
  on = "release"
  resolves = [
    "release darwin/amd64",
    "release windows/amd64",
    "release linux/amd64",
  ]
}

action "release darwin/amd64" {
  uses = "ngs/go-release.action@v1.0.0"
  env = {
    GOOS = "darwin"
    GOARCH = "amd64"
  }
  secrets = ["GITHUB_TOKEN"]
}

action "release windows/amd64" {
  uses = "ngs/go-release.action@v1.0.0"
  env = {
    GOOS = "windows"
    GOARCH = "amd64"
  }
  secrets = ["GITHUB_TOKEN"]
}

action "release linux/amd64" {
  uses = "ngs/go-release.action@v1.0.0"
  env = {
    GOOS = "linux"
    GOARCH = "amd64"
  }
  secrets = ["GITHUB_TOKEN"]
}
  </description>
    </item>
    <item>
      <title>Import AWS credentials.csv to 1Password using aws1pif</title>
      <link>https://ngs.io/2019/02/07/aws1pif/</link>
      <guid>https://ngs.io/2019/02/07/aws1pif/</guid>
      <pubDate>Thu, 07 Feb 2019 12:00:00 -0000</pubDate>
      <author>a@ngs.io (Atsushi Nagase)</author>
      <description>&lt;p&gt;I’ve just open-sourced &lt;strong&gt;aws1pif&lt;/strong&gt;, a command line tool that converts AWS credentials.csv to 1Password .1pif file format&lt;/p&gt;

&lt;p&gt;ngs/aws1pif&lt;/p&gt;&lt;h2&gt;Install&lt;/h2&gt;

&lt;p&gt;You can install aws1pif using Homebrew or go install command&lt;/p&gt;
  brew install ngs/formulae/aws1pif
  
&lt;p&gt;or&lt;/p&gt;
  go install github.com/ngs/aws1pif
  
&lt;h2&gt;How to Use&lt;/h2&gt;

&lt;p&gt;aws1pif converts CSV standard input to .1pif JSON file format as standard output.&lt;/p&gt;
  cat ~/Downloads/credentials.csv | aws1pif &amp;gt; aws.1pif
  
&lt;p&gt;1Password will launch when opening .1pif file and show confirmation dialog&lt;/p&gt;&lt;p&gt;Currently CSV with multiple credentials is not supported.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>CI2Go Today widget support</title>
      <link>https://ngs.io/2018/07/08/ci2go/</link>
      <guid>https://ngs.io/2018/07/08/ci2go/</guid>
      <pubDate>Sun, 08 Jul 2018 00:00:00 -0000</pubDate>
      <author>a@ngs.io (Atsushi Nagase)</author>
      <description>&lt;p&gt;I’ve just released version 2.1.0 of CI2Go, the CircleCI client for iPhone and iPad.&lt;/p&gt;&lt;p&gt;v2.1.0 contains the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Today widget
&lt;/li&gt;&lt;li&gt;SSH connect
&lt;/li&gt;&lt;li&gt;Delete local artifacts
&lt;/li&gt;&lt;li&gt;Open application by URL
&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Today widget&lt;/h2&gt;&lt;p&gt;You can add CI2Go widget to Today view. This shows recent 5 builds of selected project/branch or your following projects.&lt;/p&gt;

&lt;h2&gt;SSH connect&lt;/h2&gt;&lt;p&gt;SSH section will be shown while running SSH enabled builds if you installed SSH client which supports ssh:// URI scheme such as Panic’s Prompt.&lt;/p&gt;

&lt;p&gt;Launches SSH client when row of container was selected.&lt;/p&gt;

&lt;h2&gt;Delete local artifacts&lt;/h2&gt;&lt;p&gt;You can delete downloaded build artifacts from trash can icon which appears by swiping table rows left.&lt;/p&gt;

&lt;h2&gt;Open application by URL&lt;/h2&gt;

&lt;p&gt;CI2Go now handles URI schemes: chttps://, ci2go://, ci2go+https://.&lt;/p&gt;

&lt;p&gt;You can open CI2Go by replacing or prefixing protocol part of CircleCI build URL like:&lt;/p&gt;

&lt;p&gt;https://circleci.com/gh/circleci/frontend/3439 to ci2go://circleci.com/gh/circleci/frontend/3439&lt;/p&gt;

&lt;p&gt;Send me issues if you have any.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Coveralls plugin for fastlane</title>
      <link>https://ngs.io/2018/07/07/fastlane-plugin-coveralls/</link>
      <guid>https://ngs.io/2018/07/07/fastlane-plugin-coveralls/</guid>
      <pubDate>Sat, 07 Jul 2018 14:59:00 -0000</pubDate>
      <author>a@ngs.io (Atsushi Nagase)</author>
      <description>&lt;p&gt;I’ve just published a fastlane&amp;nbsp;plugin that sends Xcode code coverage to Coveralls and its depending library xccoveralls that also works as standalone command line tool.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ngs/fastlane-plugin-coveralls
&lt;/li&gt;&lt;li&gt;ngs/xccoveralls
&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Quick Start&lt;/h2&gt;

&lt;p&gt;Run the following command&lt;/p&gt;
  fastlane add_plugin coveralls
  
&lt;p&gt;Add the following line to your Fastfile&lt;/p&gt;
  lane :send_coveralls do
  coveralls
end
  
&lt;p&gt;Make sure Code Coverage checkbox is turned on for your test target.&lt;/p&gt;&lt;p&gt;Then you can send coverage data from fastlane command&lt;/p&gt;
  export XCCOVERALLS_REPO_TOKEN=... # grab yours from Coveralls.io
bundle exec fastlane send_coveralls
  
&lt;p&gt;You can check CI2Go coverage on Coveralls and Fastfile.&lt;/p&gt;

&lt;h2&gt;Motivation&lt;/h2&gt;

&lt;p&gt;I tried to introduce Xcov which is built into fastlane action, but it does not send covered lines because it uses .xccovreport or .xccoverage file which contains only summary of test coverage.&lt;/p&gt;

&lt;p&gt;So I started implementing with xcrun xccov which was introduced in Xcode 9.3.&lt;/p&gt;
  # List files
$ xcrun xccov view --file-list DerivedData/Logs/Build/*.xccovarchive

# Code coverage for specific file
$ xcrun xccov view --file /Users/ngs/src/CI2Go/AppDelegate.swift \
    DerivedData/Logs/Build/*.xccovarchive
  
&lt;p&gt;ref: xccov: Xcode Code Coverage Report for Humans&lt;/p&gt;

&lt;p&gt;Please send me issues if you have any.&lt;/p&gt;

&lt;p&gt;Enjoy XCTesting &lt;/p&gt;
</description>
    </item>
    <item>
      <title>CI2Go version 2</title>
      <link>https://ngs.io/2018/07/02/ci2go-v2/</link>
      <guid>https://ngs.io/2018/07/02/ci2go-v2/</guid>
      <pubDate>Mon, 02 Jul 2018 00:20:00 +0000</pubDate>
      <author>a@ngs.io (Atsushi Nagase)</author>
      <description>&lt;p&gt;I’ve just released major updated version 2.0.0 of CI2Go, the CircleCI client for iPhone and iPad.&lt;/p&gt;&lt;p&gt;V2 contains the following updates.&lt;/p&gt;&lt;h2&gt;iPhone X Support&lt;/h2&gt;&lt;p&gt;Started supporting iPhone X’s 5.8 inches screen.&lt;/p&gt;

&lt;h2&gt;Single Sign-on Support&lt;/h2&gt;&lt;p&gt;Update authentication flow to use Single Sign-on instead of Copy and Pasting API Tokens from CircleCI.&lt;/p&gt;

&lt;p&gt;This creates Personal API Token internally.&lt;/p&gt;

&lt;h2&gt;Build Artifacts Browser&lt;/h2&gt;&lt;p&gt;Redesigned Build Artifacts Browser.&lt;/p&gt;

&lt;p&gt;You can browse artifacts more quickly without waiting for downloading entire files.&lt;/p&gt;

&lt;p&gt;This app starts downloading when you tried to view file and continues downloading in background.&lt;/p&gt;

&lt;h2&gt;Apple Watch Complications&lt;/h2&gt;&lt;p&gt;Supported Apple Watch Complications.&lt;/p&gt;

&lt;p&gt;You can add your build status in your watch face.&lt;/p&gt;

&lt;p&gt;Due to watchOS API limitation, this does not update information realtime.&lt;/p&gt;

&lt;h2&gt;Performance improvement&lt;/h2&gt;

&lt;p&gt;In this version, I’ve redesigned entire implementation from scratch.&lt;/p&gt;

&lt;p&gt;Behaves more swift instead of dealing with offline data.&lt;/p&gt;

&lt;p&gt;Send me issues if you have any.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Wiplock - Protect main branch from in-progress branches</title>
      <link>https://ngs.io/2016/09/23/wiplock/</link>
      <guid>https://ngs.io/2016/09/23/wiplock/</guid>
      <pubDate>Thu, 22 Sep 2016 17:00:00 -0000</pubDate>
      <author>a@ngs.io (Atsushi Nagase)</author>
      <description>&lt;h2&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;I released Wiplock that protects main branch from pull requests that contains WIP in the title or incompleted tasks.&lt;/p&gt;

&lt;p&gt;https://wiplock.com&lt;/p&gt;

&lt;p&gt;Wiplock is an OSS built with Go and React + Redux. Please take a look if you’re interested in.&lt;/p&gt;

&lt;p&gt;https://github.com/ngs/wiplock&lt;/p&gt;&lt;h2&gt;Motivation&lt;/h2&gt;

&lt;p&gt;In our daily development flow, we send &lt;strong&gt;WIP pull requests&lt;/strong&gt; on GitHub before implementation was done.&lt;/p&gt;

&lt;p&gt;Sometimes we mistakenly merge these pull requests before the tasks are completed or forget removing WIP in the title that may confuse collaborators.&lt;/p&gt;

&lt;p&gt;To prevent these kind of mis-operations, I’ve built an tiny web application called Wiplock.&lt;/p&gt;

&lt;h2&gt;How it works&lt;/h2&gt;

 1. Sign in with GitHub 

&lt;p&gt;After visiting Wiplock, you’ll see the black Sign in with  button.&lt;/p&gt;

&lt;p&gt;Hit it and Authorize this app on the next screen.&lt;/p&gt;

&lt;p&gt;Make sure that organizations are granted that you want introducing Wiplock.&lt;/p&gt;

 2. Find repository and turn the switch on &lt;p&gt;After you signed in with GitHub, your repositories will be listed in Wiplock.&lt;/p&gt;

&lt;p&gt;Find repositories to introduce and turn the switch on.&lt;/p&gt;

 3. Check that works &lt;p&gt;Go to your repository and edit or create pull request to contain WIP in the title.&lt;/p&gt;

&lt;p&gt;Once you edit the title, Pull Request status would become Pending.&lt;/p&gt;

 4. Turn on protect branch &lt;p&gt;Go to Settings &amp;gt; Branches of your repo, turn Require branches to be up to date before merging checkbox on.&lt;/p&gt;

&lt;h2&gt;Launch your own Wiplock&lt;/h2&gt;

&lt;p&gt;If you won’t like to give permission to applications managed by someone else, you can launch your own Wiplock on Heroku or Docker hosts.&lt;/p&gt;

 Pre-requirements 

&lt;p&gt;You need to create your OAuth Application on GitHub.&lt;/p&gt;

&lt;p&gt;https://github.com/settings/applications/new&lt;/p&gt;

 Heroku 

&lt;p&gt;Just hit the Heroku Button on README of the repository.&lt;/p&gt;

&lt;p&gt;https://github.com/ngs/wiplock#heroku&lt;/p&gt;

 Docker 

&lt;p&gt;Redis server is required to launch on your host.&lt;/p&gt;

&lt;p&gt;If you don’t have it yet, the Official Docker image will help you bootstrapping.&lt;/p&gt;
  docker pull redis
docker run --name wiplock-redis -d redis
  
&lt;p&gt;Pull Wiplock Docker image.&lt;/p&gt;
  docker pull atsnngs/wiplock
  
&lt;p&gt;And run Wiplock by passing REDIS_URL with running container name.&lt;/p&gt;
  docker run --name wiplock -p 8000:8000 -d --rm \
  --link wiplock-redis:redis \
  -e GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID} \
  -e GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET} \
  -e SECRET=${SECRET} \
  -e REDIS_URL="redis://redis:6379" \
  atsnngs/wiplock
  
&lt;p&gt;Then you can see your Wiplock on your localhost.&lt;/p&gt;

&lt;p&gt;http://localhost:8000&lt;/p&gt;

&lt;h2&gt;Milestones&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Support locking pull requests labeled in progress
&lt;/li&gt;&lt;li&gt;Support customizing locking conditions using .wiplock.yml on the repository root
&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;I wish this could help your workflow safe, happy locking!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Testing Email Delivery in Nightwatch.js End to End test</title>
      <link>https://ngs.io/2016/09/08/nightwatch-mail-test/</link>
      <guid>https://ngs.io/2016/09/08/nightwatch-mail-test/</guid>
      <pubDate>Thu, 08 Sep 2016 08:00:00 +0000</pubDate>
      <author>a@ngs.io (Atsushi Nagase)</author>
      <description>&lt;p&gt;I’ve published an example Nightwatch.js End to End (E2E) testing project that contains Email delivery testing using Mandrill and RequestBin.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ngs/nightwatch-mail-example on GitHub&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This example project tests subscribing and unsubscribing Hacker News Letter user flow.&lt;/p&gt;&lt;p&gt;The test code is like this:&lt;/p&gt;
  page.navigate()
//
// Create Mandrill Email Route
.createEmailRoute(email)
//
// Fill in form
.waitForElementVisible('@form')
.clearValue('@email')
.setValue('@email', email)
.click('@submit')
//
// Navigate to completion screen
.waitForElementNotPresent('@form')
.assert.urlEquals(page.url + 'almostfinished.html')
//
// Check Email with specified subject
.assert.receivedEmailSubjectEquals(email,
  'Hacker Newsletter: Please Confirm Subscription')
//
// Check Email contains specified string in HTML body
.assert.receivedEmailHTMLBodyContains(email,
  '&amp;lt;a class="button" href="https://hackernewsletter.us1.list-manage.com/subscribe/confirm?u=')
  
&lt;p&gt;See full code.&lt;/p&gt;

&lt;h2&gt;Motivation&lt;/h2&gt;

&lt;p&gt;We recently introduced Nightwatch.js for End to End testing our product.&lt;/p&gt;

&lt;p&gt;I think that is pretty easy and simple to writing test code for our web application.&lt;/p&gt;

&lt;p&gt;While writing test, we wanted to test user flow through receiving Emails from our application.&lt;/p&gt;

&lt;p&gt;So I tried to implement custom actions and assertions for Nightwatch.js.&lt;/p&gt;

&lt;p&gt;ref: Extending Nightwatch - Nightwatch Developer Guide&lt;/p&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

 1. Set up Mandrill Inbound Domain 

&lt;p&gt;First you need to set up Inbound Email Domain by following Mandrill Documentation.&lt;/p&gt;

&lt;p&gt;Just type your domain and hit the blue + Add button on Inbound Domains screen.&lt;/p&gt;&lt;p&gt;After adding test domain, you need add MX record in your DNS records indicated in MX Setup popup.&lt;/p&gt; 2. Grab your Mandrill API Key 

&lt;p&gt;Next you need to grab your Mandrill API Key from settings screen&lt;/p&gt;&lt;p&gt;I recommend turning on Test Key checkbox that prevents sending Emails someone mistakenly while testing.&lt;/p&gt;

 3. (Optional) Launch your RequestBin 

&lt;p&gt;Delivered Emails are shared with public users. If you mind sharing your application Emails for them, you can launch your own RequestBin on hosting services like Heroku or IBM Bluexix by deploying Open Sourced RequestBin.&lt;/p&gt;
  git clone git://github.com/Runscope/requestbin.git
cd requestbin

heroku create
heroku addons:add heroku-redis
heroku config:set REALM=prod

git push heroku master
  
 4. Environment Variables 

&lt;p&gt;To launch the example project, export environment variables according to the above steps.&lt;/p&gt;

&lt;p&gt;I use direnv to manage local environment variables.&lt;/p&gt;
  echo "export MANDRILL_API_KEY=${YOUR_API_KEY_HERE}" &amp;gt;&amp;gt; .envrc
echo "export MAIL_DOMAIN=${YOUR_MAIL_DOMAIN_HERE}" &amp;gt;&amp;gt; .envrc

# If you set up your own RequestBin in Step 3
echo "export REQUEST_BIN_HOST=https://${YOUR_HEROKU_APP}.herokuapp.com" &amp;gt;&amp;gt; .envrc

# Allow new environment variables
direnv allow
  
 5. NPM! 

&lt;p&gt;Finally, you can launch example test suite by running npm command.&lt;/p&gt;
  npm install # for first time
npm test
  
&lt;h2&gt;The Custom Assertions and Commands&lt;/h2&gt;

&lt;p&gt;The extension file layout is like this.&lt;/p&gt;
  lib
├── custom_assertions
│&amp;nbsp;&amp;nbsp; ├── receivedEmailHTMLBodyContains.js
│&amp;nbsp;&amp;nbsp; ├── receivedEmailSubjectContains.js
│&amp;nbsp;&amp;nbsp; └── receivedEmailSubjectEquals.js
├── custom_commands
│&amp;nbsp;&amp;nbsp; ├── checkEmails.js
│&amp;nbsp;&amp;nbsp; ├── createEmailRoute.js
│&amp;nbsp;&amp;nbsp; └── deleteEmailRoutes.js
├── globals.js
└── page_objects
    └── hackernewsletter.js # example specific file
  
&lt;p&gt;You need to specify these paths in config file.&lt;/p&gt;
  {
  "custom_commands_path": "./lib/custom_commands",
  "custom_assertions_path": "./lib/custom_assertions",
  "page_objects_path": "./lib/page_objects",
  "globals_path": "./lib/globals.js",
  // snip ...
}
  
&lt;h2&gt;More Assertions&lt;/h2&gt;

&lt;p&gt;I added receivedEmailHTMLBodyContains, receivedEmailSubjectContains, receivedEmailSubjectEquals in this example project.&lt;/p&gt;

&lt;p&gt;If you want to add assertions for other field like from_email or attachments, you can implement by forking existing implementations. (See full list)&lt;/p&gt;
  const util = require('nightwatch/lib/util/utils');

exports.assertion = function receivedEmailSubjectEquals(address, expected, msg) {
  const DEFAULT_MSG = 'Testing if &amp;lt;%s&amp;gt; received with subject equals to "%s".';
  this.message = msg || util.format(DEFAULT_MSG, address, expected);

  this.expected = function() {
    return expected;
  };

  this.pass = function(value) {
    const expected = this.expected();
    return value.filter(function(email) {
      return email.subject === expected;
      // use indexOf(expected) !== -1 for *contains* implementation.
    }).length &amp;gt; 0;
  };

  this.value = function(result) {
    return result || [];
  };

  this.command = function(callback) {
    return this.api.checkEmails(address, callback);
  };

}
  
&lt;p&gt;If you write some cool assertions in your project, please fork the repository and send me a Pull Request!&lt;/p&gt;

&lt;p&gt;Happy testing!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Hyperterm Tomorrow Themes</title>
      <link>https://ngs.io/2016/07/17/hyperterm-tomorrow-themes/</link>
      <guid>https://ngs.io/2016/07/17/hyperterm-tomorrow-themes/</guid>
      <pubDate>Sun, 17 Jul 2016 04:20:00 +0000</pubDate>
      <author>a@ngs.io (Atsushi Nagase)</author>
      <description>&lt;p&gt;I’ve published Hyperterm themes based on Tomorrow Themes.&lt;/p&gt;

&lt;h2&gt;How to install&lt;/h2&gt;
  npm search hyperterm-tomorrow
$EDITOR ~/.hyperterm.js
  &lt;h2&gt;hyperterm-tomorrow&lt;/h2&gt;&lt;h2&gt;hyperterm-tomorrow-night&lt;/h2&gt;&lt;h2&gt;hyperterm-tomorrow-night-blue&lt;/h2&gt;&lt;h2&gt;hyperterm-tomorrow-night-bright&lt;/h2&gt;&lt;h2&gt;hyperterm-tomorrow-night-eighties&lt;/h2&gt;</description>
    </item>
    <item>
      <title>PGP encrypted messages for Keybase users in our chat rooms</title>
      <link>https://ngs.io/2016/05/14/hubot-keybase/</link>
      <guid>https://ngs.io/2016/05/14/hubot-keybase/</guid>
      <pubDate>Fri, 13 May 2016 22:45:00 -0000</pubDate>
      <author>a@ngs.io (Atsushi Nagase)</author>
      <description>&lt;p&gt;I’ve released &lt;strong&gt;hubot-keybase&lt;/strong&gt;, a Hubot script to encrypt messages for Keybase users.&lt;/p&gt;

&lt;p&gt;ref: &lt;strong&gt;ngs/hubot-keybase on GitHub&lt;/strong&gt;&lt;/p&gt;&lt;h2&gt;How to use&lt;/h2&gt;

&lt;p&gt;When you type message in your chat room like:&lt;/p&gt;
  hubot keybase encrypt:ngs Hi there!
#                     ^ Keybase username!
  
&lt;p&gt;Hubot replies PGP encrypted message using public key for specified user.&lt;/p&gt;
  -----BEGIN PGP MESSAGE-----
Version: OpenPGP.js v2.3.0
Comment: http://openpgpjs.org

wcBMA2GjYRB9O5DgA...(snip)
-----END PGP MESSAGE-----
  
&lt;h2&gt;Install&lt;/h2&gt;

&lt;p&gt;1. Add hubot-keybase to dependencies.&lt;/p&gt;
  npm install --save hubot-keybase
  
&lt;p&gt;2. Update external-scripts.json&lt;/p&gt;
  ["hubot-keybase"]
  
&lt;h2&gt;Feedbacks&lt;/h2&gt;

&lt;p&gt;If you find some bugs or request, feel free to drop me an issue on GitHub repository or PRs are welcome :)&lt;/p&gt;

&lt;p&gt;https://github.com/ngs/hubot-keybase/issues&lt;/p&gt;

&lt;p&gt;Enjoy encrypting!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Announcing CI2Go v1.3.0</title>
      <link>https://ngs.io/2016/03/25/ci2go/</link>
      <guid>https://ngs.io/2016/03/25/ci2go/</guid>
      <pubDate>Fri, 25 Mar 2016 10:15:00 +0000</pubDate>
      <author>a@ngs.io (Atsushi Nagase)</author>
      <description>&lt;p&gt;I’ve released v1.3.0 of CI2Go the @circleci client for iOS.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;CI2Go on the App Store&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;This update contains the following new features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rebuild without Cache
&lt;/li&gt;&lt;li&gt;Browse Build Artifacts
&lt;/li&gt;&lt;li&gt;View circle.yml
&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;and fixes Realtime Build Log Updating was unavailable due to CircleCI’s Web Socket API update.&lt;/p&gt;

&lt;p&gt;This version is still having realtime updating issue with Build List screen and will be fixed in next update.&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>
